[{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"introduction-to-the-hydraulics-package","dir":"Articles","previous_headings":"","what":"Introduction to the hydraulics package","title":"Hydraulics Vignette","text":"hydraulics package developed augment education basic closed conduit open channel hydraulics. common applications civil engineering involve water flowing turbulent conditions, functions make assumption. assumption violated, warning generated, though often means input error. engineering calculations burdened persistence U.S. customary (often referred English) units, functions work either system designating units either SI Eng.","code":""},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"water-properties","dir":"Articles","previous_headings":"","what":"1.0 Water properties","title":"Hydraulics Vignette","text":"describing behavior water pipes channels turbulent flow conditions three water properties used used calculations, vary water temperature: density (\\(\\rho\\)), dynamic viscosity(\\(\\mu\\)), kinematic viscosity(\\(\\nu\\)), related \\(\\nu=\\frac{\\mu}{\\rho}\\). additional function exists saturated vapor pressure water. properties found using dens, dvisc, kvisc, svp functions. example, kinematic viscosity water temperature 55 F found follows: Similarly water density water temperature 25 C can determined : water property functions can accept list input temperature values, enabling visualization property varying water temperature, example:  water property functions can also called ret_units parameter, case function returns object class units. enables capabilities new units deduced operations performed values. concise example blog post Edzer Pebesma, author units package. units correct, simplified form. can done setting new units. Unit conversions done way. example finding saturated vapor pressure water \\(10^{o}C\\) follows. results class units also can units plot without cumbersome formatting axis labels.","code":"nu = kvisc(T = 55, units = 'Eng') cat(sprintf(\"Kinematic viscosity: %.3e ft2/s\\n\", nu)) #> Kinematic viscosity: 1.318e-05 ft2/s rho = dens(T = 25, units = 'SI') cat(sprintf(\"Water density: %.3f kg/m3\\n\", rho)) #> Water density: 997.075 kg/m3 Ts <- seq(0, 100, 10) nus <- kvisc(T = Ts, units = 'SI') xlbl <- expression(\"Temperature, \" (degree*C)) ylbl <- expression(\"Kinematic viscosity,\" ~nu~ (m^{2}/s)) par(cex=0.8, mgp = c(2,0.7,0)) plot(Ts, nus, xlab = xlbl, ylab = ylbl, type=\"l\") T <- 25 Dens <- dens(T = T, units = 'SI', ret_units = TRUE) Dvisc <- dvisc(T = T, units = 'SI', ret_units = TRUE) #Calculate kinematic viscosity and units are generated correctly Kvisc <- Dvisc / Dens Kvisc #> 9.134879e-07 [m*N*s/kg] units::set_units(Kvisc, m^2/s) #> 9.134879e-07 [m^2/s] units::set_units(Kvisc, ft^2/s) #> 9.832702e-06 [ft^2/s] vps <- svp(T = 10, units = \"SI\", ret_units = T) vps #> 1228.188 [Pa] #convert to psi - notice the need to enclose \"in\" with backticks since \"in\"  #has other meanings in R units::set_units(vps,lbf/`in`^2) #> 0.1781336 [lbf/in^2] Temperature <- units::set_units(seq(0, 100, 10), degree_Celsius) Kinematic_Viscosity <- kvisc(T = Temperature, units = 'SI', ret_units = TRUE) par(cex=0.8, mar = par(\"mar\") + c(0, .2, 0, 0)) plot(Temperature, Kinematic_Viscosity, type=\"l\")"},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"fundamental-constants","dir":"Articles","previous_headings":"","what":"2.0 Fundamental constants","title":"Hydraulics Vignette","text":"Two important descriptive quantities engineering hydraulics Reynolds number, Re Froude number Fr. \\(Re=\\frac{VD}{\\nu}\\) describes turbulence flow. expresses ratio kinematic forces, expressed velocity V characteristic length pipe diameter, D, viscous forces expressed kinematic viscosity \\(\\nu\\). open channels characteristic length hydraulic depth, area flow divided top width. adequately turbulent conditions exists, Reynolds numbers exceed 4000 full pipes, 2000 open channels. open channel flow, given channel shape flow rate, flow can usually exist two different depths, termed subcritical (slow, deep) supercritical (shallow, fast). exception critical flow conditions, one depth exists, critical depth. depth exhibited flow determined slope roughness channel. Froude number defined \\(Fr=\\frac{V}{\\sqrt{gD}}\\). Fr characterizes flow : constants calculated internally returned output many functions. Critical flow important open-channel flow applications discussed .","code":""},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"friction-loss-in-circular-pipes","dir":"Articles","previous_headings":"","what":"3.0 Friction Loss in Circular Pipes","title":"Hydraulics Vignette","text":"energy point along pipe containing flowing water often described energy per unit weight, energy head, E: \\[E = z+\\frac{P}{\\gamma}+\\alpha\\frac{V^2}{2g}\\] P pressure, \\(\\gamma=\\rho g\\) specific weight water, z elevation point, V average velocity, term units length. \\(\\alpha\\) kinetic energy adjustment factor account non-uniform velocity distribution across cross-section. \\(\\alpha\\) typically assumed 1.0 turbulent flow value close 1.0 \\(\\frac{V^2}{2g}\\) (velocity head) tends small relation terms equation. water flows pipe energy lost due friction pipe walls local disturbances (minor losses). energy loss two sections expressed \\({E_1} - {h_l} = {E_2}\\). pipes long, \\(\\frac{L}{D}>1000\\), friction losses dominate energy loss system, head loss, \\(h_l\\), calculated head loss due friction, \\(h_f\\). energy head loss due friction walls pipe described Darcy-Weisbach equation, estimates energy loss per unit weight, head loss \\({h_f}\\), units length. circular pipes expressed : \\[h_f = \\frac{fL}{D}\\frac{V^2}{2g} = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2}\\] equation f friction factor, typically calculated Colebrook equation: \\[\\frac{1}{\\sqrt{f}} = -2\\log\\left(\\frac{\\frac{k_s}{D}}{3.7} + \\frac{2.51}{Re\\sqrt{f}}\\right)\\] \\(k_s\\) absolute roughness pipe wall. close approximations Colebrook equation explicit form facilitate hand-calculations, package uses Colebrook function. one variables Darcy Weisbach equation, extension Colebrook equation, may treated unknown. existing pipe known flow rate, friction loss length pipe may found: Reynolds number adequately high ensure flow turbulent Colebrook equation valid. water properties function, can called ret_units = TRUE return list units objects (using input ): new design problem can involve calculation required diameter given head loss flow rate, pipe specified pressure flow downstream point. example follows. usefulness R package much individual calculations, repeated trials see one variable might vary another. example, might interesting see required diameter varies changing flow rate. following example illustrates calculation diameters required meet specified head loss flows varying 30 - 45 ft^3/s.  Another example use package laboratory setting, pressure measurements taken two points along straight pipe sequence flow rates determine pipe roughness. example, length pipe 3 m, diameter 25 mm, following head losses observed different flow rates: Roughness values calculated shown , results plotted Moody diagram reality check.","code":"D <- 20/12    #20 inch converted to ft L <- 10560    #ft Q <- 4        #ft^3/s T <- 60       #degrees F ks <- 0.0005  #ft  ans <- darcyweisbach(Q = Q,D = D, L = L, ks = ks,                       nu = kvisc(T=T, units=\"Eng\"), units = c(\"Eng\")) #> hf missing: solving a Type 1 problem cat(sprintf(\"Reynolds no: %.0f\\nFriction Fact: %.4f\\nHead Loss: %.2f ft\\n\",              ans$Re, ans$f, ans$hf)) #> Reynolds no: 248625 #> Friction Fact: 0.0173 #> Head Loss: 5.72 ft ans <- darcyweisbach(Q = 4.0,D = 20/12, L = 10560, ks = 0.0005, nu = kvisc(T=T, units=\"Eng\"),                      units = \"Eng\", ret_units = TRUE) knitr::kable(format(as.data.frame(ans), digits = 2), format = \"pipe\") Q <- 37.5     #flow in ft^3/s L <- 8000     #pipe length in ft hf <- 215     #head loss due to friction, in ft T <- 68       #water temperature, F ks <- 0.0008  #pipe roughness, ft ans <- darcyweisbach(Q = Q, hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='Eng'), units = c('Eng')) #> D missing: solving a Type 3 problem cat(sprintf(\"Reynolds no: %.0f\\nFriction Fact: %.4f\\nDiameter: %.2f ft\\n\", ans$Re, ans$f, ans$D)) #> Reynolds no: 2336974 #> Friction Fact: 0.0164 #> Diameter: 1.85 ft Qs <- seq(30, 45, 1.0)    #flows in ft^3/s L <- 8000                 #pipe length in ft hf <- 215                 #head loss due to friction, in ft T <- 68                   #water temperature, F ks <- 0.0008              #pipe roughness, ft ans <- mapply(darcyweisbach, Q=Qs, MoreArgs =                   list(hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='Eng'), units = 'Eng')) ans <- as.data.frame(t(ans)) plot(ans$Q, ans$D, xlab = \"Q, ft^3/s\", ylab = \"D, ft\", type=\"l\") grid() Qs = c(0.00020, 0.00024, 0.00030) #converted to m^3/s hfs <- c(0.052,0.073,0.110) ans <- mapply(darcyweisbach, Q=Qs, hf=hfs, MoreArgs =                   list(L = 3.0, D = 0.025, nu = kvisc(T=20, units='SI'), units = 'SI')) ks_values = unlist((as.data.frame(t(ans)))$ks) cat(round(ks_values,6)) #> 0.000473 0.000433 0.000397 cat(paste0(\"\\nMean Roughness, ks = \",round(mean(ks_values),6), \" m\")) #>  #> Mean Roughness, ks = 0.000434 m Re_values <- unlist((as.data.frame(t(ans)))$Re) f_values <- unlist((as.data.frame(t(ans)))$f) moody(Re = Re_values, f = f_values)"},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"flow-in-circular-pipes-flowing-partially-full","dir":"Articles","previous_headings":"","what":"4.0 Flow in Circular Pipes Flowing Partially Full","title":"Hydraulics Vignette","text":"Manning equation (also known Strickler equation) describes flow conditions open channel uniform flow conditions. often expressed : \\[Q=\\frac{C}{n}{R}^{\\frac{2}{3}}{S_f}^{\\frac{1}{2}}\\] C 1.0 SI units 1.49 Eng (U.S. Customary) units. Q flow rate, cross-sectional flow area, n Manning roughness coefficient, R hydraulic radius \\(R=\\frac{}{P}\\), P wetted perimeter. Critical depth defined relation (critical conditions): \\[\\frac{Q^{2}B}{g\\,^{3}}=1\\] B top width water surface. full flow circular pipes, one variables Manning equation, related geometric variables, may treated unknown. existing pipe, common problem determination depth, y given flow Q, given pipe diameter d, slope S roughness n. example follows. also sometimes convenient see cross-section diagram.","code":"ans <- manningc(Q=0.01, n=0.013, Sf=0.001, d = 0.2, units=\"SI\", ret_units = TRUE) knitr::kable(format(as.data.frame(ans), digits = 2), format = \"pipe\", padding=0) ans <- manningc(Q=0.01, n=0.013, Sf=0.001, d = 0.2, units=\"SI\", ret_units = TRUE) xc_circle(y = ans$y, d=ans$d, units = \"SI\")"},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"flow-in-open-channels-rectangular-triangular-trapezoidal","dir":"Articles","previous_headings":"","what":"5.0 Flow in Open Channels (rectangular, triangular, trapezoidal)","title":"Hydraulics Vignette","text":"flow circular pipes flowing less full, flow open channel rectangular, triangular, trapezoidal shape uses Manning equation. Substituting geometric relationships hydraulic radius cross-sectional area, Manning equation takes form: \\[Q=\\frac{C}{n}{\\frac{\\left(+^2\\right)^{\\frac{5}{3}}}{\\left(b+2y\\sqrt{1+m^2}\\right)^\\frac{2}{3}}}{S_f}^{\\frac{1}{2}}\\] rectangular channel, side slope vertical, m = 0; triangular channel, b = 0. given Q, m, n, Sf, hydraulically efficient channel found maximizing R, can done setting Manning equation \\(\\frac{\\partial R}{\\partial y}=0\\). produces: \\[y_{opt} = 2^{\\frac{1}{4}}\\left(\\frac{Qn}{C\\left(2\\sqrt{1+m^2}-m\\right)S_f^{\\frac{1}{2}}}\\right)^{\\frac{3}{8}}\\] \\[b_{opt} = 2y_{opt}\\left(\\sqrt{1+m^2}-m\\right)\\] manningt function works similarly function circular pipes, excluded argument one function determines solution. example, design might require slope deliver required flow, Q channel known geometry (bottom width, b, side slope m) given depth y: Thus, longitudinal slope channel need 0.00088, drop 0.88 ft per 1000 ft. critical depth yc lower normal depth y, indicating flow conditions subcritical, also seen Fr < 1.0. Units can also returned function. simple diagram can generated channel.  solving flow depth, y, channel bottom width, b, additional variable returned optimal depth, yopt, optimal width, bopt. optimal hydraulic efficiency practical concerns construction often result designs flow depths less hydraulic optimum. Solving prior example bottom width illustrates . results show , aside rounding, width returned expected (approximately 20 ft), optimal bottom width hydraulic efficiency closer 4.76 ft. check depth associated channel optimal width, substitute optimal width b solve y: channel geometry flow rate convenient plot specific energy diagram, illustrates different flow depths can occur given specific energy. important understanding may happen water surface flow encounters obstacle transition. channel example , diagram  provides illustration y=3 ft flow subcritical (critical depth). Specific energy conditions prior example \\(E=y+\\frac{V^2}{2g}=3.0+\\frac{5.22^2}{2*32.2}=3.42 ft\\). channel bottom abrupt rise \\(E-E_c=3.42-3.03=0.39 ft\\) critical depth occur hump. rise anything greater cause damming occur. flow hump critical, downstream hump flow supercritical conditions, flowing alternate depth. specific energy given depth y alternate depth can added plot including argument depth, y.  final example shows vary multiple input variables simultaneously. flow Q vary range n y values? expand.grid function produces combinations different variables. functions can run problem permutations results plotted many different ways. One example follows.","code":"ans <- manningt(Q = 360., n = 0.015, m = 1, b = 20.0, y = 3.0, units = \"Eng\") cat(sprintf(\"Slope: %.5f ft\\n\", ans$Sf)) #> Slope: 0.00088 ft knitr::kable(format(as.data.frame(ans), digits = 2), format = \"pipe\", padding=0) ans <- manningt(Q = 360., n = 0.015, m = 1, b = 20.0, y = 3.0, units = \"Eng\", ret_units = TRUE) knitr::kable(format(as.data.frame(ans), digits = 2), format = \"pipe\", padding=0) xc_trap( y = 3.0, b = 20.0, m = 1.0, units = \"Eng\") ans <- manningt(Q = 360., n = 0.015, m = 1, y = 3.0, Sf = 0.00088, units = \"Eng\") knitr::kable(format(as.data.frame(ans), digits = 2), format = \"pipe\", padding=0) cat(sprintf(\"Optimal bottom width: %.5f ft\\n\", ans$bopt)) #> Optimal bottom width: 4.76753 ft ans <- manningt(Q = 360., n = 0.015, m = 1, b = 4.767534, Sf = 0.00088, units = \"Eng\") cat(sprintf(\"Optimal depth: %.5f ft\\n\", ans$yopt)) #> Optimal depth: 5.75492 ft spec_energy_trap( Q = 360, b = 20, m = 1, scale = 4, units = \"Eng\" ) spec_energy_trap( Q = 360, b = 20, m = 1, scale = 4, y=3.0, units = \"Eng\" ) ns <- seq(0.011, 0.021, 0.002) ys <- seq(1.5, 2.1, 0.1) ny <- expand.grid(n=ns, y=ys) ans <- mapply(manningt, n = ny$n, y = ny$y, MoreArgs = list(m = 2, Sf = 0.0005, b = 3, units = \"SI\")) x <- as.data.frame(t(ans)) #to simplify plotting, select columns of interest and change each from list to numeric x2 <- data.frame(Q=unlist(x$Q),y=unlist(x$y),n=unlist(x$n)) ggplot2::ggplot(data=x2,ggplot2::aes(x=y,y=Q, group=n, colour=n)) + ggplot2::geom_line() +   ggplot2::labs(x = \"y, m\", y = expression(paste(\"Q, \", ~m^3/s)))"},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"pump-curve-and-operating-points","dir":"Articles","previous_headings":"","what":"6.0 Pump Curve and Operating Points","title":"Hydraulics Vignette","text":"system delivering water circular pipes assistance pump, selection pump requires consideration pump characteristics energy required deliver different flow rates system. described system pump characteristic curves. intersect defines operating point, flow (energy) head pump operate system. simple hydraulic system (https://www.castlepumps.com) described , simple system loss head (energy per unit weight) due friction, \\(h_f\\), described Darcy-Weisbach equation, can simplified : \\[h_f = \\frac{fL}{D}\\frac{V^2}{2g} = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2} = KQ{^2}\\] total dynamic head system requires pump provide, \\(h_p\\), found solving energy equation upstream reservoir (point 1) downstream reservoir (point 2). \\[h_p = \\left(z+\\frac{P}{\\gamma}+\\frac{V^2}{2g}\\right)_2 - \\left(z+\\frac{P}{\\gamma}+\\frac{V^2}{2g}\\right)_1+h_f\\] simple system example, velocity negligible reservoirs 1 2, pressures reservoirs atmospheric, equation becomes: \\[h_p = \\left(z_2 - z_1\\right) + h_f=h_s+h_f=h_s+KQ^2\\] Using hydraulics package, coefficient, K, can calculated manually using package functions friction loss pipe system using \\(Q=1\\). example: example assume static head 30 ft generate systemcurve object: sample set pump curves (https://www.gouldspumps.com). three red dots points selected approximate curve three selected points used generate polynomial fit curve. currently three options polynomial: \\(h_{shutoff}\\) value pump head \\(Q={0}\\). coordinates points can input pumpcurve function numeric vectors. flow manufacturer’s pump curves often use units hydraulics package needs, units package provides convenient way convert needed. function pumpcurve returns pumpcurve object includes polynomial fit equation simple plot check fit.  two curves can combined find operating point selected pump defined system. operpoint <- function (pcurve = NULL, scurve = NULL)","code":"ans <- darcyweisbach(Q = 1,D = 20/12, L = 3884, ks = 0.0005, nu = 1.23e-5, units = \"Eng\") cat(sprintf(\"Coefficient K: %.3f\\n\", ans$hf)) #> Coefficient K: 0.160 scurve <- systemcurve(hs = 30, K = ans$hf, units = \"Eng\") qgpm <- units::set_units(c(0, 5000, 7850), gallons/minute) qcfs <- units::set_units(qgpm, ft^3/s) hft <- c(81, 60, 20) #units are already in ft so setting units is optional pcurve <- pumpcurve(Q = qcfs, h = hft, eq = \"poly2\", units = \"Eng\") pcurve$p oppt <- operpoint(pcurve = pcurve, scurve = scurve) cat(sprintf(\"Operating Point: Q = %.3f, h = %.3f\\n\", oppt$Qop, oppt$hop)) #> Operating Point: Q = 12.051, h = 53.285 oppt$p #> Warning: Removed 1 row(s) containing missing values (geom_path)."},{"path":"https://edm44.github.io/hydraulics/articles/hydraulics_vignette.html","id":"pipe-networks-and-the-hardy-cross-method","dir":"Articles","previous_headings":"","what":"7.0 Pipe Networks and the Hardy-Cross method","title":"Hydraulics Vignette","text":"water pipe networks containing multiple loops typical method solve flow pipe segment uses Hardy-Cross method. consists setting initial guess flow (magnitude direction) pipe segment, ensuring conservation mass preserved node (vertex) network. calculations performed loop, ensuring energy conserved. hydraulics package, Darcy-Weisbach equation used estimate head loss pipe segment, expressed condensed form \\({h_f = rQ^{2}}\\) : \\[{r = \\frac{8fL}{\\pi^{2}gD^{5}}}\\] needed, friction factor f calculated using Colebrook equation. flow adjustment loop calculated iteration : \\[{\\Delta{Q_i} = -\\frac{\\sum_{j=1}^{p_i} r_{ij}Q_j|Q_j|}{\\sum_{j=1}^{p_i} 2r_{ij}Q_j^2}}\\] loop number, j pipe number, \\({p_i}\\) number pipes loop \\({\\Delta{Q_i}}\\) flow adjustment applied pipe loop next iteration. Pipes shared loops receive adjustments loops. Input consists pipe characteristics, pipe order initial flows loop, number iterations perform, unit system used (needed fixed r values provided). sample pipe network pipe numbers indicated black Input system, assuming fixed f values, look like following. (fixed r values provided, f, L D needed). f values estimated using \\(ks=0.00025 m\\) form Colebrook equation fully rough flows: \\[\\frac{1}{\\sqrt{f}}=log\\left(\\frac{3.7}{\\frac{ks}{D}}\\right)\\] simplification removes velocity dependence f. Running looking output three iterations: output pipe data frame added columns, including flow (direction first loop containing segment). Hardy-Cross method often used fixed f (r) values used exercises performed hand, use Colebrook equation allows friction losses vary Reynolds number. use approach input data must include absolute roughness. Example values included : effect allowing calculation f (correctly) dependent velocity (via Reynolds number) can seen, though effect final flow values small.","code":"dfpipes <- data.frame(   ID = c(1,2,3,4,5,6,7,8,9,10),                                #pipe ID   D = c(0.3,0.2,0.2,0.2,0.2,0.15,0.25,0.15,0.15,0.25),         #diameter in m   L = c(250,100,125,125,100,100,125,100,100,125),              #length in m   f = c(.01879,.02075,.02075,.02075,.02075,.02233,.01964,.02233,.02233,.01964) ) loops <- list(c(1,2,3,4,5),c(4,6,7,8),c(3,9,10,6)) Qs <- list(c(.040,.040,.02,-.02,-.04),c(.02,0,0,-.02),c(-.02,.02,0,0)) ans <- hardycross(dfpipes = dfpipes, loops = loops, Qs = Qs, n_iter = 3, units = \"SI\") knitr::kable(ans$dfloops, digits = 4, format = \"pipe\", padding=0) knitr::kable(ans$dfpipes, digits = 4, format = \"pipe\", padding=0) dfpipes <- data.frame(   ID = c(1,2,3,4,5,6,7,8,9,10),                         #pipe ID   D = c(0.3,0.2,0.2,0.2,0.2,0.15,0.25,0.15,0.15,0.25),  #diameter in m   L = c(250,100,125,125,100,100,125,100,100,125),       #length in m   ks = rep(0.00025,10)                                  #absolute roughness, m ) loops <- list(c(1,2,3,4,5),c(4,6,7,8),c(3,9,10,6)) Qs <- list(c(.040,.040,.02,-.02,-.04),c(.02,0,0,-.02),c(-.02,.02,0,0)) ans <- hardycross(dfpipes = dfpipes, loops = loops, Qs = Qs, n_iter = 3, units = \"SI\") knitr::kable(ans$dfpipes, digits = 4, format = \"pipe\", padding=0)"},{"path":"https://edm44.github.io/hydraulics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ed Maurer. Maintainer.","code":""},{"path":"https://edm44.github.io/hydraulics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maurer E, Embry (2022). hydraulics: Basic Pipe Open Channel Hydraulics. https://github.com/EdM44/hydraulics, https://edm44.github.io/hydraulics/.","code":"@Manual{,   title = {hydraulics: Basic Pipe and Open Channel Hydraulics},   author = {Ed Maurer and Irucka Embry},   year = {2022},   note = {https://github.com/EdM44/hydraulics, https://edm44.github.io/hydraulics/}, }"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"description","dir":"","previous_headings":"","what":"Basic Pipe and Open Channel Hydraulics","title":"Basic Pipe and Open Channel Hydraulics","text":"hydraulics R package solves basic pipe hydraulics pressure gravity flow conditions, open-channel hydraulics trapezoidal channels, including triangular rectangular. Pressure pipe solutions include functions 1) describe properties water, 2) solve Darcy-Weisbach equation friction loss pipes, 3) plot Moody diagram. Partially-filled pipe open-channel flow solutions solved Manning equation. format functions pressure pipe solutions designed compatible iemisc package, open channel hydraulics solutions modifications code package.","code":""},{"path":"https://edm44.github.io/hydraulics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"#Install the stable CRAN version of this package install.packages(\"hydraulics\") #Install the development version of this package if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"EdM44/hydraulics\")"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"examples-see-more-examples-in-the-function-descriptions","dir":"","previous_headings":"","what":"Examples (see more examples in the function descriptions)","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"library(hydraulics)"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"1-type-1-problem-solve-for-friction-loss-eng-us-units","dir":"","previous_headings":"","what":"1) Type 1 problem (solve for friction loss): Eng (US) units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"D <- 20/12    #20 inch converted to ft L <- 10560    #ft Q <- 4        #ft3/s T <- 60       #F ks <- 0.0005  #ft  #Optionally, use utility functions to find the Reynolds Number and friction factor, f: reynolds_number(V = velocity(D, Q), D = D, nu = kvisc(T = T, units = \"Eng\")) #> [1] 248624.7 colebrook(ks = ks, V = velocity(D, Q), D = D, nu = kvisc(T = T, units = \"Eng\")) #> [1] 0.0173031  #Solve directly for the missing value of friction loss  ans1 <- darcyweisbach(Q = Q,D = D, L = L, ks = ks, nu = kvisc(T=T, units=\"Eng\"), units = c(\"Eng\")) #> hf missing: solving a Type 1 problem cat(sprintf(\"Reynolds no: %.0f\\nFriction Fact: %.4f\\nHead Loss: %.2f ft\\n\", ans1$Re, ans1$f, ans1$hf)) #> Reynolds no: 248625 #> Friction Fact: 0.0173 #> Head Loss: 5.72 ft"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"2-type-2-solving-for-flow-rate-q-si-units","dir":"","previous_headings":"","what":"2) Type 2 (solving for flow rate, Q): SI Units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"D <- .5         #m L <- 10         #m hf <- 0.006*L   #m T <- 20         #C ks <- 0.000046  #m ans2 <- darcyweisbach(D = D, hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='SI'), units = c('SI')) #> Q missing: solving a Type 2 problem cat(sprintf(\"Reynolds no: %.0f\\nFriction Fact: %.4f\\nFlow: %.2f m3/s\\n\", ans2$Re, ans2$f, ans2$Q)) #> Reynolds no: 1010337 #> Friction Fact: 0.0133 #> Flow: 0.41 m3/s"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"type-3-solving-for-diameter-d-eng-us-units","dir":"","previous_headings":"","what":"Type 3 (solving for diameter, D): Eng (US) units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"Q <- 37.5     #flow in ft^3/s L <- 8000     #pipe length in ft hf <- 215     #head loss due to friction, in ft T <- 68       #water temperature, F ks <- 0.0008  #pipe roughness, ft ans3 <- darcyweisbach(Q = Q, hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='Eng'), units = c('Eng')) #> D missing: solving a Type 3 problem cat(sprintf(\"Reynolds no: %.0f\\nFriction Fact: %.4f\\nDiameter: %.2f ft\\n\", ans3$Re, ans3$f, ans3$D)) #> Reynolds no: 2336974 #> Friction Fact: 0.0164 #> Diameter: 1.85 ft"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"solving-for-roughness-height-ks-eng-us-units-print-results-as-data-frame","dir":"","previous_headings":"","what":"Solving for roughness height (ks): Eng (US) units, print results as data frame","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"D <- 1.85     #diameter in ft Q <- 37.5     #flow in ft^3/s L <- 8000     #pipe length in ft hf <- 215     #head loss due to friction, in ft T <- 68       #water temperature, F ans4 <- darcyweisbach(Q = Q, D = D, hf = hf, L = L, nu = kvisc(T=T, units='Eng'), units = c('Eng')) #> ks missing: solving for missing roughness height knitr::kable(setNames(as.data.frame(unlist(ans4)),c('value')), format = \"html\", padding=0)"},{"path":[]},{"path":"https://edm44.github.io/hydraulics/index.html","id":"find-kinematic-viscosity-for-water-temperature-of-55-f","dir":"","previous_headings":"Utility functions for water properties can be used independently as well:","what":"Find kinematic viscosity for water temperature of 55 F","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"nu = kvisc(T = 55, units = 'Eng') cat(sprintf(\"Kinematic viscosity: %.3e ft2/s\\n\", nu)) #> Kinematic viscosity: 1.318e-05 ft2/s"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"find-kinematic-viscosity-assuming-default-water-temperature-of-68-f","dir":"","previous_headings":"Utility functions for water properties can be used independently as well:","what":"Find kinematic viscosity assuming default water temperature of 68 F","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"nu = kvisc(units = 'Eng') #>  #> Temperature not given. #> Assuming T = 68 F cat(sprintf(\"Kinematic viscosity: %.3e ft2/s\\n\", nu)) #> Kinematic viscosity: 1.105e-05 ft2/s"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"find-water-density-for-water-temperature-of-25-c","dir":"","previous_headings":"Utility functions for water properties can be used independently as well:","what":"Find water density for water temperature of 25 C","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"rho = dens(T = 25, units = 'SI') cat(sprintf(\"Water density: %.3f kg/m3\\n\", rho)) #> Water density: 997.075 kg/m3"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"plot-a-moody-diagram-with-optional-points-added","dir":"","previous_headings":"","what":"Plot a Moody diagram, with optional points added","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"moody(Re = c(ans1$Re, ans2$Re, ans3$Re), f = c(ans1$f, ans2$f, ans3$f))"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"open-channel-flow-in-a-pipe-solving-for-q-si-units","dir":"","previous_headings":"","what":"Open Channel Flow in a Pipe: solving for Q: SI Units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"oc1 <- manningc(d = 0.6, n = 0.013, Sf = 1./400., y = 0.24, units = \"SI\") cat(sprintf(\"Flow rate, Q: %.2f m3/s\\nFull pipe flow rate, Qf: %.2f\\n\", oc1$Q, oc1$Qf)) #> Flow rate, Q: 0.10 m3/s #> Full pipe flow rate, Qf: 0.31"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"open-channel-flow-in-a-pipe-solving-for-diameter-d-when-given-y_d-eng-us-units","dir":"","previous_headings":"","what":"Open Channel Flow in a Pipe: solving for diameter, d when given y_d): Eng (US) units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"oc2 <- manningc(Q = 83.5, n = 0.015, Sf = 0.0002, y_d = 0.9, units = \"Eng\") cat(sprintf(\"Required diameter: %.2f ft\\nFlow depth: %.2f\\n\", oc2$d, oc2$y)) #> Required diameter: 7.00 ft #> Flow depth: 6.30"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"plot-the-cross-section-for-the-last-example","dir":"","previous_headings":"","what":"Plot the cross section for the last example","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"xc_circle( y = oc2$y ,d = oc2$d, units = \"Eng\" )"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"open-channel-flow-in-a-channel-solving-for-slope-eng-us-units","dir":"","previous_headings":"","what":"Open Channel Flow in a Channel: solving for slope: Eng (US) units","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"oc3 <- manningt(Q = 360., n = 0.015, m = 1, b = 20.0, y = 3.0, units = \"Eng\") cat(sprintf(\"Slope: %.5f ft\\nCritical depth: %.2f\\n\", oc3$Sf, oc3$yc)) #> Slope: 0.00088 ft #> Critical depth: 2.08"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"plot-a-specific-energy-diagram-for-the-channel-of-last-example","dir":"","previous_headings":"","what":"Plot a specific energy diagram for the channel of last example","title":"Basic Pipe and Open Channel Hydraulics","text":"","code":"spec_energy_trap( Q = oc3$Q, b = oc3$b, m = oc3$m, scale = 4, units = \"Eng\" )"},{"path":"https://edm44.github.io/hydraulics/index.html","id":"plot-the-cross-section-for-the-last-example-1","dir":"","previous_headings":"","what":"Plot the cross section for the last example","title":"Basic Pipe and Open Channel Hydraulics","text":"functions related pump characteristic curves operating point determination, pipe network solutions, refer hydraulics vignette.","code":"xc_trap( y = oc3$y, b = oc3$b, m = oc3$m, units = \"Eng\" )"},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"function calculates Darcy-Weisbach friction factor provided package use water circular pipes equation technically valid liquid channel. many parts package, techniques formatting drawn Irucka Embry's iemisc package, includes methods similar functionality. Two utility functions included velocity  Reynolds Number.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"","code":"velocity(D = NULL, Q = NULL)  reynolds_number(V = NULL, D = NULL, nu = NULL)  colebrook(ks, V, D, nu)"},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"D numeric vector contains pipe diameter [\\(m\\) \\(ft\\)] D >=0.0025 m (0.0082 ft). Q (velocity function ) numeric vector contains flow rate [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] V numeric vector contains average Velocity flow pipe, equal flow divided area, \\(\\frac{Q}{}\\) [\\(m\\,s^{-1}\\) \\(ft\\,s^{-1}\\)] nu numeric vector contains kinematic viscosity water, [\\(m^2 s^{-1}\\) \\(ft^2 s^{-1}\\)]. Computed utility function water_properties.R: kvisc(T=T, units=['SI' 'Eng']) ks numeric vector contains 'equivalent sand roughness height sand roughness height. Units consistent input [\\(m\\) \\(ft\\)]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"f Returns numeric vector containing Darcy-Weisbach friction   factor","code":""},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"Colebrook-White equation developed estimate Darcy-Weisbach friction factor commercial pipes turbulent flow conditions. recommended pipe diameters greater  2.5 mm (0.1 inch).  equation : $$\\frac{1}{\\sqrt{f}} = -2\\log\\left(\\frac{\\frac{ks}{D}}{3.7} + \\frac{2.51}{Re\\sqrt{f}}\\right)$$ \\(Re = \\frac{VD}{nu}\\) unitless Reynolds Number.","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/colebrook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Darcy-Weisbach Friction Factor f — colebrook","text":"","code":"# A Type 1 problem (solve for hf): US units D <- 20/12   #diameter of 20 inches Q <- 4       #flow in ft^3/s T <- 60      #water temperature in F ks <- 0.0005 #pipe roughness in ft  f <- colebrook(ks=ks,V=velocity(D,Q), D=D, nu=kvisc(T=T, units=\"Eng\"))"},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":null,"dir":"Reference","previous_headings":"","what":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"function solves Darcy-Weisbach friction loss equation water circular pipes. function solves either head loss (hf), flow rate (Q), diameter (D),roughness height, (ks) whichever missing (included argument).","code":""},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"","code":"darcyweisbach(   Q = NULL,   D = NULL,   hf = NULL,   L = NULL,   ks = NULL,   nu = NULL,   units = c(\"SI\", \"Eng\"),   ret_units = FALSE )"},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"Q numeric vector contains flow rate [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] D numeric vector contains pipe diameter [\\(m\\) \\(ft\\)] hf numeric vector contains head loss pipe section [\\(m\\) \\(ft\\)] L numeric vector contains pipe length [\\(m\\) \\(ft\\)], ks numeric vector contains equivalent sand roughness height. Units consistent input [\\(m\\) \\(ft\\)] nu numeric vector contains kinematic viscosity water, [\\(m^2 s^{-1}\\) \\(ft^2 s^{-1}\\)]. units character vector contains system units [options SI International System Units Eng English (US customary) units. used compatibility iemisc package ret_units set TRUE value(s) returned class units units attached value. [Default FALSE]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"Returns list including missing parameter (hf, Q, D, ks): Q - flow rate. V - flow velocity. L - pipe length. hf - head loss due friction f - Darcy-Weisbach friction factor ks - roughness height Re - Reynolds number","code":""},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"Darcy-Weisbach equation developed estimate head loss, \\(h_f\\), due friction  length pipe. circular pipes expressed :  $$h_f = \\frac{fL}{D}\\frac{V^2}{2g} = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2}$$ \\(f\\) friction factor (calculated colebrook function \\(g\\) gravitational acceleration (\\(9.81\\frac{m}{s^2}\\) \\(32.2\\frac{ft}{s^2}\\)).","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/darcyweisbach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solves the Darcy-Weisbach Equation for the either head loss (hf),\nflow rate (Q), diameter (D), or roughness height (ks). — darcyweisbach","text":"","code":"#Type 2 (solving for flow rate, Q): SI Units D <- .5 L <- 10 hf <- 0.006*L T <- 20 ks <- 0.000046 darcyweisbach(D = D, hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='SI'), units = c('SI')) #> Q missing: solving a Type 2 problem #> $Q #> [1] 0.4059048 #>  #> $V #> [1] 2.067256 #>  #> $L #> [1] 10 #>  #> $D #> [1] 0.5 #>  #> $hf #> [1] 0.06 #>  #> $f #> [1] 0.01330553 #>  #> $ks #> [1] 4.6e-05 #>  #> $Re #> [1] 1010337 #>   #Type 3 (solving for diameter, D): Eng (US) units Q <- 37.5     #flow in ft^3/s L <- 8000     #pipe length in ft hf <- 215     #head loss due to friction, in ft T <- 68       #water temperature, F ks <- 0.0008  #pipe roughness, ft darcyweisbach(Q = Q, hf = hf, L = L, ks = ks, nu = kvisc(T=T, units='Eng'), units = c('Eng')) #> D missing: solving a Type 3 problem #> $Q #> [1] 37.5 #>  #> $V #> [1] 13.964 #>  #> $L #> [1] 8000 #>  #> $D #> [1] 1.849123 #>  #> $hf #> [1] 215 #>  #> $f #> [1] 0.01642589 #>  #> $ks #> [1] 8e-04 #>  #> $Re #> [1] 2336974 #>"},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"function uses Hardy-Cross method iteratively solve equations conservation mass energy water pipe network. input consists data frame pipe characteristics lists  pipes loop (listed clockwise direction) initial guesses flows pipe (positive flows clockwise direction).","code":""},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"","code":"hardycross(   dfpipes = dfpipes,   loops = loops,   Qs = Qs,   n_iter = 1,   units = c(\"SI\", \"Eng\"),   ret_units = FALSE )"},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"dfpipes data frame pipe data. Format described , must contain column named _ID_. loops integer list defining pipes loop network. Qs numeric list initial flows pipe loop [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] n_iter integer identifying number iterations perform. units character vector contains system units [options SI International System Units Eng English (US customary) units. ret_units set TRUE value(s) returned pipe flows  class units units attached value. [Default FALSE]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"Returns list two data frames: dfloops - final flow magnitude direction (clockwise positive) loops pipe dfpipes - input pipe data frame, additional columns including final Q","code":""},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"input data frame pipe data must contain pipe ID column  pipe numbers used loops input list. three options  input column pipe roughness data frame: case absolute pipe roughness, \\(ks\\) (m ft), input,    input pipe data frame must also include columns length, \\(L\\)   diameter, \\(D\\), (m ft) \\(r\\) can calculated. case,    new \\(f\\) \\(r\\) calculated iteration, final values    included output. input \\(r\\) \\(f\\) columns provided, values    \\(ks\\) ignored. input \\(r\\) column provided, \\(ks\\) \\(f\\)    ignored. Colebrook equation used determine \\(f\\), water    temperature \\(20^{o}C\\) \\(68^{o}F\\) used. number iterations perform may specified n_iter input   value, execution stops average flow adjustment becomes smaller    1 Darcy-Weisbach equation used estimate head loss pipe segment, expressed condensed form \\(h_f = rQ^{2}\\) : $$r = \\frac{8fL}{\\pi^{2}gD^{5}}$$   needed, friction factor \\(f\\) calculted using Colebrook  equation. flow adjustment loop calculated iteration :  $$\\Delta{Q_i} = -\\frac{\\sum_{j=1}^{p_i} r_{ij}Q_j|Q_j|}{\\sum_{j=1}^{p_i} 2r_{ij}Q_j^2}$$ \\(\\) loop number, \\(j\\) pipe number, \\(p_i\\) number  pipes loop \\(\\) \\(\\Delta{Q_i}\\) flow adjustment applied  pipe loop \\(\\) next iteration.","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/hardycross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies the Hardy-Cross method to solve for pipe flows in a network. — hardycross","text":"","code":"#              A----------B --> 0.5m^3/s #              |\\   (4)   | #              | \\        | #              |  \\       | #              |   \\(2)   | #              |    \\     |(5) #              |(1)  \\    | #              |      \\   | #              |       \\  | #              |        \\ | #              |   (3)   \\| # 0.5m^3/s --> C----------D  #Input pipe characteristics data frame. With r given other columns not needed dfpipes <- data.frame( ID = c(1,2,3,4,5),                     #pipe ID r = c(200,2500,500,800,300)            #resistance used in hf=rQ^2 ) loops <- list(c(1,2,3),c(4,2,5)) Qs <- list(c(0.3,0.1,-0.2),c(0.2,-0.1,-0.3)) hardycross(dfpipes = dfpipes, loops = loops, Qs = Qs, n_iter = 1, units = \"SI\") #> Using fixed r values #> Iteration: 1, Loop: 1, dQ: -0.02805 #> Iteration: 1, Loop: 2, dQ: 0.02000 #> $dfloops #>   loop pipe        flow #> 1    1    1  0.27195122 #> 2    1    2  0.05195122 #> 3    1    3 -0.22804878 #> 4    2    4  0.22000000 #> 5    2    2 -0.05195122 #> 6    2    5 -0.28000000 #>  #> $dfpipes #>   ID    r           Q #> 1  1  200  0.27195122 #> 2  2 2500  0.05195122 #> 3  3  500 -0.22804878 #> 4  4  800  0.22000000 #> 5  5  300 -0.28000000 #>"},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":null,"dir":"Reference","previous_headings":"","what":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"function solves Manning equation water flow circular pipe  less full. Uniform flow conditions assumed, pipe slope  equal slope water surface energy grade line.  modification code prepared Irucka Embry iemisc package. iemisc::manningcirc function adapted limited cases commonly used classroom exercises, additional checks included ensure pipe flowing less full, cross-section figure also available. iemisc::manningcirc iemisc::manningcircy functions combined single function.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"","code":"manningc(   Q = NULL,   n = NULL,   Sf = NULL,   y = NULL,   d = NULL,   y_d = NULL,   units = c(\"SI\", \"Eng\"),   ret_units = FALSE )"},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"Q numeric vector contains flow rate [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] n numeric vector contains Manning roughness coefficient. Sf numeric vector contains slope pipe [unitless] y numeric vector contains water depth [\\(m\\) \\(ft\\)] d numeric vector contains pipe diameter [\\(m\\) \\(ft\\)] y_d numeric vector contains ratio depth diameter [unitless] units character vector contains system units [options SI International System Units Eng English (US customary) units. used compatibility iemisc package] ret_units set TRUE value(s) returned class units units attached value. [Default FALSE]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"Returns list including missing parameter: Q - flow rate V - flow velocity - cross-sectional area flow P - wetted perimeter R - hydraulic radius (/P) y - flow depth d - pipe diameter Sf - slope n - Manning's roughness yc - critical depth Fr - Froude number Re - Reynolds number Qf - Full pipe flow rate","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"possible applications function solving Manning equation circular pipes : Manning equation (also known Strickler equation) describes flow conditions open channel uniform flow conditions. often expressed :  $$Q = \\frac{C}{n}{R}^{\\frac{2}{3}}{S_f}^{\\frac{1}{2}}$$ \\(C\\) 1.0 SI units 1.49 Eng (U.S. Customary) units. Critical depth  defined relation (critical conditions): $$\\frac{Q^{2}B}{g\\,^{3}}=1$$ \\(B\\) top width water surface. Since B equals zero full pipe, critical  depth set pipe diameter \\(d\\) flow \\(Q\\) exceeds value produce  critical flow \\(\\frac{y}{d}=0.99\\).","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"Ed Maurer, Irucka Embry","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solves the Manning Equation for gravity flow in a circular pipe — manningc","text":"","code":"#Solving for flow rate, Q: SI Units manningc(d = 0.6, n = 0.013, Sf = 1./400., y = 0.24, units = \"SI\") #> $Q #> [1] 0.1034572 #>  #> $V #> [1] 0.9795864 #>  #> $A #> [1] 0.1056131 #>  #> $P #> [1] 0.821663 #>  #> $R #> [1] 0.1285358 #>  #> $y #> [1] 0.24 #>  #> $d #> [1] 0.6 #>  #> $Sf #> [1] 0.0025 #>  #> $n #> [1] 0.013 #>  #> $yc #> [1] 0.2049712 #>  #> $Fr #> [1] 0.7380179 #>  #> $Re #> [1] 123074.7 #>  #> $Qf #> [1] 0.3070058 #>  #returns 0.1 m3/s  #Solving for Sf, if d=600 mm and pipe is to flow half full manningc(d = 0.6, Q = 0.17, n = 0.013, y = 0.3, units = \"SI\") #> $Q #> [1] 0.17 #>  #> $V #> [1] 1.202504 #>  #> $A #> [1] 0.1413717 #>  #> $P #> [1] 0.9424778 #>  #> $R #> [1] 0.15 #>  #> $y #> [1] 0.3 #>  #> $d #> [1] 0.6 #>  #> $Sf #> [1] 0.00306623 #>  #> $n #> [1] 0.013 #>  #> $yc #> [1] 0.2653927 #>  #> $Fr #> [1] 0.7910804 #>  #> $Re #> [1] 176311.2 #>  #> $Qf #> [1] 0.34 #>  #returns required slope of 0.003  #Solving for diameter, d when given y_d): Eng (US) units manningc(Q = 83.5, n = 0.015, Sf = 0.0002, y_d = 0.9, units = \"Eng\") #> $Q #> [1] 83.5 #>  #> $V #> [1] 2.287699 #>  #> $A #> [1] 36.49955 #>  #> $P #> [1] 17.49094 #>  #> $R #> [1] 2.086769 #>  #> $y #> [1] 6.301548 #>  #> $d #> [1] 7.00172 #>  #> $Sf #> [1] 2e-04 #>  #> $n #> [1] 0.015 #>  #> $yc #> [1] 2.338705 #>  #> $Fr #> [1] 0.1367745 #>  #> $Re #> [1] 13947973 #>  #> $Qf #> [1] 78.34463 #>  #returns 7.0 ft required diameter  #Solving for depth, d when given Q: SI units manningc(Q=0.01, n=0.0013, Sf=0.001, d = 0.2, units=\"SI\") #> $Q #> [1] 0.01 #>  #> $V #> [1] 2.088668 #>  #> $A #> [1] 0.004787739 #>  #> $P #> [1] 0.1902905 #>  #> $R #> [1] 0.02516016 #>  #> $y #> [1] 0.04194989 #>  #> $d #> [1] 0.2 #>  #> $Sf #> [1] 0.001 #>  #> $n #> [1] 0.0013 #>  #> $yc #> [1] 0.08454977 #>  #> $Fr #> [1] 3.889917 #>  #> $Re #> [1] 51367.08 #>  #> $Qf #> [1] 0.1037178 #>  #returns depth  y = 0.042 m, critical depth, yc = 0.085 m"},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":null,"dir":"Reference","previous_headings":"","what":"Solves the Manning Equation for water flow in an open channel — manningt","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"function solves Manning equation water flow open  channel trapezoidal shape.  Uniform flow conditions assumed,  channel slope equal slope water surface  energy grade line. modification code prepared  Irucka Embry iemisc package. Specifically iemisc::manningtrap, iemisc::manningrect, iemisc::manningtri combined adapted cases commonly used classroom exercises. auxiliary variables iemisc code included (shear stress, specific energy), can calculated separately. cross-section figure also available.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"","code":"manningt(   Q = NULL,   n = NULL,   m = NULL,   Sf = NULL,   y = NULL,   b = NULL,   units = c(\"SI\", \"Eng\"),   ret_units = FALSE )"},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"Q numeric vector contains flow rate [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] n numeric vector contains Manning roughness coefficient m numeric vector contains side slope channel (m:1 H:V) [unitless] Sf numeric vector contains slope channel [unitless] y numeric vector contains water depth [\\(m\\) \\(ft\\)] b numeric vector contains channel bottom width [\\(m\\) \\(ft\\)] units character vector contains system units [options SI International System Units Eng English (US customary) units. used compatibility iemisc package. ret_units set TRUE value(s) returned class units units attached value. [Default FALSE]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"Returns list including missing parameter: Q - flow rate V - flow velocity - cross-sectional area flow P - wetted perimeter R - hydraulic radius y - flow depth (normal depth) b - channel bottom width m - channel side slope Sf - slope B - top width water surface n - Manning's roughness yc - critical depth Fr - Froude number Re - Reynolds number bopt - optimal bottom width (returned solving b) yopt - optimal water depth (returned solving y)","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"Manning equation characterizes open channel flow conditions uniform flow conditions:  $$Q = \\frac{C}{n}{R}^{\\frac{2}{3}}{S_f}^{\\frac{1}{2}}$$ \\(C\\) 1.0 SI units 1.49 Eng (U.S. Customary) units. Using geometric relationships  hydraulic radius cross-sectional area trapezoid, takes form: $$Q=\\frac{C}{n}{\\frac{\\left(+^2\\right)^{\\frac{5}{3}}}{\\left(b+2y\\sqrt{1+m^2}\\right)^\\frac{2}{3}}}{S_f}^{\\frac{1}{2}}$$ Critical depth defined relation (critical conditions): $$\\frac{Q^{2}B}{g\\,^{3}}=1$$ \\(B\\) top width water surface. given Q, m, n, Sf, hydraulically efficient channel found maximizing R, can done setting  Manning equation \\(\\frac{\\partial R}{\\partial y}=0\\). produces: $$y_{opt} = 2^{\\frac{1}{4}}\\left(\\frac{Qn}{C\\left(2\\sqrt{1+m^2}-m\\right)S_f^{\\frac{1}{2}}}\\right)^{\\frac{3}{8}}$$ $$b_{opt} = 2y_{opt}\\left(\\sqrt{1+m^2}-m\\right)$$","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"Ed Maurer, Irucka Embry","code":""},{"path":"https://edm44.github.io/hydraulics/reference/manningt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solves the Manning Equation for water flow in an open channel — manningt","text":"","code":"#Solving for flow rate, Q, trapezoidal channel: SI Units manningt(n = 0.013, m = 2, Sf = 0.0005, y = 1.83, b = 3, units = \"SI\") #> $Q #> [1] 22.19996 #>  #> $V #> [1] 1.82149 #>  #> $A #> [1] 12.1878 #>  #> $P #> [1] 11.18401 #>  #> $R #> [1] 1.089752 #>  #> $y #> [1] 1.83 #>  #> $b #> [1] 3 #>  #> $m #> [1] 2 #>  #> $Sf #> [1] 5e-04 #>  #> $B #> [1] 10.32 #>  #> $n #> [1] 0.013 #>  #> $yc #> [1] 1.322952 #>  #> $Fr #> [1] 0.535234 #>  #> $Re #> [1] 1940245 #>  #returns Q=22.2 m3/s  #Solving for roughness, n, rectangular channel: Eng units manningt(Q = 14.56, m = 0, Sf = 0.0004, y = 2.0, b = 4, units = \"Eng\") #> $Q #> [1] 14.56 #>  #> $V #> [1] 1.82 #>  #> $A #> [1] 8 #>  #> $P #> [1] 8 #>  #> $R #> [1] 1 #>  #> $y #> [1] 2 #>  #> $b #> [1] 4 #>  #> $m #> [1] 0 #>  #> $Sf #> [1] 4e-04 #>  #> $B #> [1] 4 #>  #> $n #> [1] 0.01629942 #>  #> $yc #> [1] 0.7437873 #>  #> $Fr #> [1] 0.2267924 #>  #> $Re #> [1] 5317520 #>  #returns Manning n of 0.016  #Solving for depth, y, triangular channel: SI units manningt(Q = 1.0, n = 0.011, m = 1, Sf = 0.0065, b = 0, units = \"SI\") #> $Q #> [1] 1 #>  #> $V #> [1] 2.648641 #>  #> $A #> [1] 0.3775521 #>  #> $P #> [1] 1.737935 #>  #> $R #> [1] 0.2172418 #>  #> $y #> [1] 0.6144527 #>  #> $b #> [1] 0 #>  #> $m #> [1] 1 #>  #> $Sf #> [1] 0.0065 #>  #> $B #> [1] 1.228905 #>  #> $n #> [1] 0.011 #>  #> $yc #> [1] 0.7276052 #>  #> $Fr #> [1] 1.525926 #>  #> $Re #> [1] 562430.1 #>  #> $yopt #> [1] 0.4493444 #>  #returns 0.6 m normal flow depth"},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Moody diagram with optional manually added points — moody","title":"Creates a Moody diagram with optional manually added points — moody","text":"function plots standard Moody diagram, allows additional points added including arguments Re f.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Moody diagram with optional manually added points — moody","text":"","code":"moody(Re = NULL, f = NULL)"},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Moody diagram with optional manually added points — moody","text":"Re (optional) numeric vector contains Reynolds numbers points manually added f (optional) numeric vector (length Re) contains Darcy-Weisbach friction factors corresponding points manually added","code":""},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Moody diagram with optional manually added points — moody","text":"Moody diagram, optional added (Re, f) points","code":""},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a Moody diagram with optional manually added points — moody","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/moody.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a Moody diagram with optional manually added points — moody","text":"","code":"# Draw canonical Moody diagram moody()  # Draw Moody diagram plotting two additional points Re = c(10000, 100000) f = c(0.04, 0.03) moody( Re = Re, f = f )"},{"path":"https://edm44.github.io/hydraulics/reference/operpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","title":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","text":"Uses input pump system curves find operating point pump create plot.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/operpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","text":"","code":"operpoint(pcurve = NULL, scurve = NULL)"},{"path":"https://edm44.github.io/hydraulics/reference/operpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","text":"pcurve pumpcurve object scurve systemcurve object","code":""},{"path":"https://edm44.github.io/hydraulics/reference/operpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","text":"Returns list including: Qop - flow operating point [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] hop - head operating point [\\(m\\) \\(ft\\)] p - plot object curves","code":""},{"path":[]},{"path":"https://edm44.github.io/hydraulics/reference/operpoint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uses input pump and system curves to find the operating point\nfor a pump and create a plot. — operpoint","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"portion based https://github.com/PhDMeiwp/basicTrendline/blob/master/R/trendline.R","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"","code":"pumpcurve(Q = NULL, h = NULL, eq = \"poly1\", units = c(\"SI\", \"Eng\"))"},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"Q Numeric vector flow rates selected points pump curve [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] h Numeric vector heads selected points pump curve [\\(m\\) \\(ft\\)] eq Character vector identifying equation fit (see details) units character vector contains system units [options SI International System Units Eng English (US customary) units.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"Returns object class pumpcurve consisting list including: curve - function defining curve fit data eqn - character vector equation curve r2 - coefficient determination curve fit, \\(R^2\\) p - plot object fit curve units - units system passed function","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"form equation fit input points may one  following, determined eq input parameter. \\(h_{shutoff}\\) head pump curve associated  \\(Q=0\\). shutoff head \\(Q=0\\) included input vectors poly3 equation form used.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/pumpcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a polynomial curve to three or more points from a pump characteristic\ncurve. This allows solving for an operating point of the pump in a \npiping system. — pumpcurve","text":"","code":"#Input in Eng units - use \\code{units} package for easy unit conversion qgpm <- units::set_units(c(0, 5000, 7850), gallons/minute) qcfs <- units::set_units(qgpm, ft^3/s) hft <- c(81, 60, 20) #units are already in ft so setting units is optional pumpcurve(Q = qcfs, h = hft, eq = \"poly2\", units = \"Eng\") #> $curve #> function (x)  #> coef(hqfit)[1] + x^2 * coef(hqfit)[2] #> <bytecode: 0x56448450bbd8> #> <environment: 0x564484509740> #>  #> $eqn #> [1] \"h == 82.5 - 0.201*Q^2\" #>  #> $r2 #> [1] 0.995 #>  #> $p  #>  #> $units #> [1] \"Eng\" #>  #> attr(,\"class\") #> [1] \"pumpcurve\""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"function plots specific energy diagram trapezoidal (including rectangular triangular) channel, annotation critical depth minimum specific energy.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"","code":"spec_energy_trap(   Q = NULL,   b = NULL,   m = NULL,   y = NULL,   scale = 3,   units = c(\"SI\", \"Eng\") )"},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"Q flow rate [\\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\)] b bottom width [\\(m\\) \\(ft\\)] m side slope (H:1) [unitless] y depth flow [\\(m\\) \\(ft\\)] (optional) scale multiplier (yc) axis scales (default 3) units character vector contains system units [options SI International System Units Eng English (US customary) units.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"specific energy diagram","code":""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"Specific Energy, E, energy, expressed head (.e., mechanical energy  per unit weight water, units length) relative channel bottom. calculated :  $$E = y+\\alpha\\frac{Q^{2}}{2g\\,^{2}} = y+\\alpha\\frac{V^{2}}{2g}$$ \\(y\\) flow depth, \\(\\) cross-sectional flow area, \\({V}=\\frac{Q}{}\\),  \\(\\alpha\\) kinetic energy correction factor account non-uniform velocities across  cross-section;  \\(\\alpha=1.0\\) function (commonly assumed).","code":""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/spec_energy_trap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a specific energy diagram for a trapezoidal channel — spec_energy_trap","text":"","code":"# Draw a specific cross-section with flow 1, width 2, side slope 3:1 (H:V) spec_energy_trap(Q = 1.0, b = 2.0, m = 3.0, scale = 4, units = \"SI\")"},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"Creates system curve piping system using static head  coefficient.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"","code":"systemcurve(hs = NULL, K = NULL, units = c(\"SI\", \"Eng\"))"},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"hs Numeric value static head [\\(m\\) \\(ft\\)] K Numeric value coefficient equation \\(h = hs + {K}{Q}^2\\) Q units \\(m^3 s^{-1}\\) \\(ft^3 s^{-1}\\) units character vector contains system units [options SI International System Units Eng English (US customary) units.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"Returns object class systemcurve consisting list including: curve - function defining system curve eqn - character vector equation curve units - units system passed function","code":""},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/systemcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a system curve for a piping system using the static head and \na coefficient. — systemcurve","text":"","code":"#Input in Eng units. Coefficient can be calculated manually or using  #other package functions for friction loss in a pipe system using \\eqn{Q=1} ans <- darcyweisbach(Q = 1,D = 20/12, L = 3884, ks = 0.0005, nu = 1.23e-5, units = \"Eng\") #> hf missing: solving a Type 1 problem systemcurve(hs = 30, K = ans$hf, units = \"Eng\") #> $curve #> function (x)  #> hs + x^2 * K #> <bytecode: 0x564487a664b8> #> <environment: 0x564487a65f78> #>  #> $eqn #> [1] \"h == 30 + 0.16*Q^2\" #>  #> $units #> [1] \"Eng\" #>  #> attr(,\"class\") #> [1] \"systemcurve\""},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"function calculates water properties used functions.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"","code":"dvisc(T = NULL, units = c(\"SI\", \"Eng\"), ret_units = FALSE)  dens(T = NULL, units = c(\"SI\", \"Eng\"), ret_units = FALSE)  kvisc(T = NULL, units = c(\"SI\", \"Eng\"), ret_units = FALSE)  svp(T = NULL, units = c(\"SI\", \"Eng\"), ret_units = FALSE)"},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"T water temperature [\\(^{\\circ}C\\) \\(^{\\circ}F\\)] units character vector contains system units [options SI International System Units Eng English (US customary) units. used compatibility iemisc package ret_units set TRUE value(s) returned class units units attached value. [Default FALSE]","code":""},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"rho, density water   dens function [\\({kg}\\,{m^{-3}}\\) \\({slug}\\,{ft^{-3}}\\)] mu, dynamic viscosity water   dvisc function [\\({N}\\,{s}\\,{m^{-2}}\\) \\({lbf}\\,{s}\\,{ft^{-2}}\\)] nu, kinematic viscosity water   kvisc function [\\(m^2 s^{-1}\\) \\(ft^2 s^{-1}\\)]. svp, saturation vapor pressure water   svp function [\\(N/m^2\\) \\(lbf/ft^2\\)].","code":""},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/waterprops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to calculate water properties: density, dynamic and kinematic \nviscosity, and saturation vapor pressure — waterprops","text":"","code":"#Find kinematic viscocity for water temperature of 55 F nu = kvisc(T = 55, units = 'Eng')  #Find kinematic viscocity assuming default water temperature of 68 F nu = kvisc(units = 'Eng') #>  #> Temperature not given. #> Assuming T = 68 F  #Find water density for water temperature of 25 C rho = dens(T = 25, units = 'SI')  #Find saturation vapor pressure for water temperature of 10 C vps = svp(T = 10, units = 'SI')"},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a cross-section plot for a partially filled pipe — xc_circle","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"function plots cross-section circular pipe, shaded filled level indicated depth diameter values passed .","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"","code":"xc_circle(y = NULL, d = NULL, units = c(\"SI\", \"Eng\"))"},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"y water depth [\\(m\\) \\(ft\\)] d pipe diameter [\\(m\\) \\(ft\\)] units character vector contains system units [options SI International System Units Eng English (US customary) units.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"cross-section diagram","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a cross-section plot for a partially filled pipe — xc_circle","text":"","code":"# Draw a cross-section with diameter 1.0 and depth 0.7 xc_circle(y = 0.7, d = 1.0, units = \"SI\")"},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a cross-section plot for an open channel — xc_trap","title":"Creates a cross-section plot for an open channel — xc_trap","text":"function plots cross-section  (trapezoid, rectangle, triangle),  shaded filled level indicated values passed .","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a cross-section plot for an open channel — xc_trap","text":"","code":"xc_trap(y = NULL, b = NULL, m = NULL, units = c(\"SI\", \"Eng\"))"},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a cross-section plot for an open channel — xc_trap","text":"y water depth  [\\(m\\) \\(ft\\)] b bottom width  [\\(m\\) \\(ft\\)] m side slope (H:1) units character vector contains system units [options SI International System Units Eng English (US customary) units.","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a cross-section plot for an open channel — xc_trap","text":"cross-section diagram","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a cross-section plot for an open channel — xc_trap","text":"Ed Maurer","code":""},{"path":"https://edm44.github.io/hydraulics/reference/xc_trap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a cross-section plot for an open channel — xc_trap","text":"","code":"# Draw a cross-section with depth 1, width 2, side slope 3:1 (H:V) xc_trap(y = 1.0, b = 2.0, m = 3.0, units = \"SI\")"},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-040","dir":"Changelog","previous_headings":"","what":"hydraulics 0.4.0","title":"hydraulics 0.4.0","text":"Added functions solve flows pape network Hardy-Cross method Added saturated vapor pressure function weater properties Updated vignette demonstrate new functions","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-030","dir":"Changelog","previous_headings":"","what":"hydraulics 0.3.0","title":"hydraulics 0.3.0","text":"CRAN release: 2021-05-19 Added functions fit pump characteristic curve system curve Updated vignette demonstrate new functions Improved plotting specific energy diagrams ","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-024","dir":"Changelog","previous_headings":"","what":"hydraulics 0.2.4","title":"hydraulics 0.2.4","text":"CRAN release: 2021-02-25 Improved plotting specific energy diagrams","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-023","dir":"Changelog","previous_headings":"","what":"hydraulics 0.2.3","title":"hydraulics 0.2.3","text":"CRAN release: 2020-12-13 Added capabilities calculate optimal trapezoidal channel width depth Added illustrations vignette new functions Corrected equations Colebrook formula","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-022","dir":"Changelog","previous_headings":"","what":"hydraulics 0.2.2","title":"hydraulics 0.2.2","text":"CRAN release: 2020-08-26 Added ability use units package functions Added detailed vignette demonstrate capabilities package","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-021","dir":"Changelog","previous_headings":"","what":"hydraulics 0.2.1","title":"hydraulics 0.2.1","text":"CRAN release: 2020-08-02 Expanded necessary corrected documentation functions Changed name colebrook_f colebrook alignment function name Added function calculate critical depth circular pipe","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-020","dir":"Changelog","previous_headings":"","what":"hydraulics 0.2.0","title":"hydraulics 0.2.0","text":"CRAN release: 2020-07-02 Added functionality solve absolute roughness presure pipe flow Added manningc function include partially filled pipe solutions Added manningt function include trapezoidal (including rectangular triangular) open-channel flow solutions Added plotting circle trapezoid cross-sections open channels Added spec_energy_trap function plot specific energy diagram trapezoidal channels","code":""},{"path":"https://edm44.github.io/hydraulics/news/index.html","id":"hydraulics-010","dir":"Changelog","previous_headings":"","what":"hydraulics 0.1.0","title":"hydraulics 0.1.0","text":"CRAN release: 2020-05-18 Initial Release","code":""}]
